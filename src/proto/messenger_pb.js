// source: messenger.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.org.shlimtech.typeeleven.GetMessageAfterRequest', null, global);
goog.exportSymbol('proto.org.shlimtech.typeeleven.GetMessageAfterResponse', null, global);
goog.exportSymbol('proto.org.shlimtech.typeeleven.GetMessageBeforeRequest', null, global);
goog.exportSymbol('proto.org.shlimtech.typeeleven.GetMessageBeforeResponse', null, global);
goog.exportSymbol('proto.org.shlimtech.typeeleven.GrpcMessage', null, global);
goog.exportSymbol('proto.org.shlimtech.typeeleven.SendMessageRequest', null, global);
goog.exportSymbol('proto.org.shlimtech.typeeleven.SendMessageResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.shlimtech.typeeleven.GrpcMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.shlimtech.typeeleven.GrpcMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.shlimtech.typeeleven.GrpcMessage.displayName = 'proto.org.shlimtech.typeeleven.GrpcMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.shlimtech.typeeleven.SendMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.shlimtech.typeeleven.SendMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.shlimtech.typeeleven.SendMessageRequest.displayName = 'proto.org.shlimtech.typeeleven.SendMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.shlimtech.typeeleven.SendMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.shlimtech.typeeleven.SendMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.shlimtech.typeeleven.SendMessageResponse.displayName = 'proto.org.shlimtech.typeeleven.SendMessageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.shlimtech.typeeleven.GetMessageAfterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.shlimtech.typeeleven.GetMessageAfterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.shlimtech.typeeleven.GetMessageAfterRequest.displayName = 'proto.org.shlimtech.typeeleven.GetMessageAfterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.shlimtech.typeeleven.GetMessageAfterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.shlimtech.typeeleven.GetMessageAfterResponse.repeatedFields_, null);
};
goog.inherits(proto.org.shlimtech.typeeleven.GetMessageAfterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.shlimtech.typeeleven.GetMessageAfterResponse.displayName = 'proto.org.shlimtech.typeeleven.GetMessageAfterResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.shlimtech.typeeleven.GetMessageBeforeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.displayName = 'proto.org.shlimtech.typeeleven.GetMessageBeforeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.repeatedFields_, null);
};
goog.inherits(proto.org.shlimtech.typeeleven.GetMessageBeforeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.displayName = 'proto.org.shlimtech.typeeleven.GetMessageBeforeResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.shlimtech.typeeleven.GrpcMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.org.shlimtech.typeeleven.GrpcMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.shlimtech.typeeleven.GrpcMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.GrpcMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    senderemail: jspb.Message.getFieldWithDefault(msg, 2, ""),
    receiveremail: jspb.Message.getFieldWithDefault(msg, 3, ""),
    content: jspb.Message.getFieldWithDefault(msg, 4, ""),
    time: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.shlimtech.typeeleven.GrpcMessage}
 */
proto.org.shlimtech.typeeleven.GrpcMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.shlimtech.typeeleven.GrpcMessage;
  return proto.org.shlimtech.typeeleven.GrpcMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.shlimtech.typeeleven.GrpcMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.shlimtech.typeeleven.GrpcMessage}
 */
proto.org.shlimtech.typeeleven.GrpcMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderemail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiveremail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.shlimtech.typeeleven.GrpcMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.shlimtech.typeeleven.GrpcMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.shlimtech.typeeleven.GrpcMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.GrpcMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSenderemail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReceiveremail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.org.shlimtech.typeeleven.GrpcMessage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.shlimtech.typeeleven.GrpcMessage} returns this
 */
proto.org.shlimtech.typeeleven.GrpcMessage.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string senderEmail = 2;
 * @return {string}
 */
proto.org.shlimtech.typeeleven.GrpcMessage.prototype.getSenderemail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.shlimtech.typeeleven.GrpcMessage} returns this
 */
proto.org.shlimtech.typeeleven.GrpcMessage.prototype.setSenderemail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string receiverEmail = 3;
 * @return {string}
 */
proto.org.shlimtech.typeeleven.GrpcMessage.prototype.getReceiveremail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.shlimtech.typeeleven.GrpcMessage} returns this
 */
proto.org.shlimtech.typeeleven.GrpcMessage.prototype.setReceiveremail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string content = 4;
 * @return {string}
 */
proto.org.shlimtech.typeeleven.GrpcMessage.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.shlimtech.typeeleven.GrpcMessage} returns this
 */
proto.org.shlimtech.typeeleven.GrpcMessage.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 time = 5;
 * @return {number}
 */
proto.org.shlimtech.typeeleven.GrpcMessage.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.shlimtech.typeeleven.GrpcMessage} returns this
 */
proto.org.shlimtech.typeeleven.GrpcMessage.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.shlimtech.typeeleven.SendMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.shlimtech.typeeleven.SendMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.shlimtech.typeeleven.SendMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.SendMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.org.shlimtech.typeeleven.GrpcMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.shlimtech.typeeleven.SendMessageRequest}
 */
proto.org.shlimtech.typeeleven.SendMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.shlimtech.typeeleven.SendMessageRequest;
  return proto.org.shlimtech.typeeleven.SendMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.shlimtech.typeeleven.SendMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.shlimtech.typeeleven.SendMessageRequest}
 */
proto.org.shlimtech.typeeleven.SendMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.shlimtech.typeeleven.GrpcMessage;
      reader.readMessage(value,proto.org.shlimtech.typeeleven.GrpcMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.shlimtech.typeeleven.SendMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.shlimtech.typeeleven.SendMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.shlimtech.typeeleven.SendMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.SendMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.org.shlimtech.typeeleven.GrpcMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional GrpcMessage message = 1;
 * @return {?proto.org.shlimtech.typeeleven.GrpcMessage}
 */
proto.org.shlimtech.typeeleven.SendMessageRequest.prototype.getMessage = function() {
  return /** @type{?proto.org.shlimtech.typeeleven.GrpcMessage} */ (
    jspb.Message.getWrapperField(this, proto.org.shlimtech.typeeleven.GrpcMessage, 1));
};


/**
 * @param {?proto.org.shlimtech.typeeleven.GrpcMessage|undefined} value
 * @return {!proto.org.shlimtech.typeeleven.SendMessageRequest} returns this
*/
proto.org.shlimtech.typeeleven.SendMessageRequest.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.shlimtech.typeeleven.SendMessageRequest} returns this
 */
proto.org.shlimtech.typeeleven.SendMessageRequest.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.shlimtech.typeeleven.SendMessageRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.shlimtech.typeeleven.SendMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.shlimtech.typeeleven.SendMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.shlimtech.typeeleven.SendMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.SendMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.shlimtech.typeeleven.SendMessageResponse}
 */
proto.org.shlimtech.typeeleven.SendMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.shlimtech.typeeleven.SendMessageResponse;
  return proto.org.shlimtech.typeeleven.SendMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.shlimtech.typeeleven.SendMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.shlimtech.typeeleven.SendMessageResponse}
 */
proto.org.shlimtech.typeeleven.SendMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.shlimtech.typeeleven.SendMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.shlimtech.typeeleven.SendMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.shlimtech.typeeleven.SendMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.SendMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.org.shlimtech.typeeleven.SendMessageResponse.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.shlimtech.typeeleven.SendMessageResponse} returns this
 */
proto.org.shlimtech.typeeleven.SendMessageResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.shlimtech.typeeleven.GetMessageAfterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.shlimtech.typeeleven.GetMessageAfterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.shlimtech.typeeleven.GetMessageAfterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.GetMessageAfterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    useremail: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.shlimtech.typeeleven.GetMessageAfterRequest}
 */
proto.org.shlimtech.typeeleven.GetMessageAfterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.shlimtech.typeeleven.GetMessageAfterRequest;
  return proto.org.shlimtech.typeeleven.GetMessageAfterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.shlimtech.typeeleven.GetMessageAfterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.shlimtech.typeeleven.GetMessageAfterRequest}
 */
proto.org.shlimtech.typeeleven.GetMessageAfterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUseremail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.shlimtech.typeeleven.GetMessageAfterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.shlimtech.typeeleven.GetMessageAfterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.shlimtech.typeeleven.GetMessageAfterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.GetMessageAfterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUseremail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.org.shlimtech.typeeleven.GetMessageAfterRequest.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.shlimtech.typeeleven.GetMessageAfterRequest} returns this
 */
proto.org.shlimtech.typeeleven.GetMessageAfterRequest.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string userEmail = 2;
 * @return {string}
 */
proto.org.shlimtech.typeeleven.GetMessageAfterRequest.prototype.getUseremail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.shlimtech.typeeleven.GetMessageAfterRequest} returns this
 */
proto.org.shlimtech.typeeleven.GetMessageAfterRequest.prototype.setUseremail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.shlimtech.typeeleven.GetMessageAfterResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.shlimtech.typeeleven.GetMessageAfterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.shlimtech.typeeleven.GetMessageAfterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.shlimtech.typeeleven.GetMessageAfterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.GetMessageAfterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.org.shlimtech.typeeleven.GrpcMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.shlimtech.typeeleven.GetMessageAfterResponse}
 */
proto.org.shlimtech.typeeleven.GetMessageAfterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.shlimtech.typeeleven.GetMessageAfterResponse;
  return proto.org.shlimtech.typeeleven.GetMessageAfterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.shlimtech.typeeleven.GetMessageAfterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.shlimtech.typeeleven.GetMessageAfterResponse}
 */
proto.org.shlimtech.typeeleven.GetMessageAfterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.shlimtech.typeeleven.GrpcMessage;
      reader.readMessage(value,proto.org.shlimtech.typeeleven.GrpcMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.shlimtech.typeeleven.GetMessageAfterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.shlimtech.typeeleven.GetMessageAfterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.shlimtech.typeeleven.GetMessageAfterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.GetMessageAfterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.org.shlimtech.typeeleven.GrpcMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GrpcMessage messages = 1;
 * @return {!Array<!proto.org.shlimtech.typeeleven.GrpcMessage>}
 */
proto.org.shlimtech.typeeleven.GetMessageAfterResponse.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.org.shlimtech.typeeleven.GrpcMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.shlimtech.typeeleven.GrpcMessage, 1));
};


/**
 * @param {!Array<!proto.org.shlimtech.typeeleven.GrpcMessage>} value
 * @return {!proto.org.shlimtech.typeeleven.GetMessageAfterResponse} returns this
*/
proto.org.shlimtech.typeeleven.GetMessageAfterResponse.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.org.shlimtech.typeeleven.GrpcMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.shlimtech.typeeleven.GrpcMessage}
 */
proto.org.shlimtech.typeeleven.GetMessageAfterResponse.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.org.shlimtech.typeeleven.GrpcMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.shlimtech.typeeleven.GetMessageAfterResponse} returns this
 */
proto.org.shlimtech.typeeleven.GetMessageAfterResponse.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.shlimtech.typeeleven.GetMessageBeforeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    useremail: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.shlimtech.typeeleven.GetMessageBeforeRequest}
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.shlimtech.typeeleven.GetMessageBeforeRequest;
  return proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.shlimtech.typeeleven.GetMessageBeforeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.shlimtech.typeeleven.GetMessageBeforeRequest}
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUseremail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.shlimtech.typeeleven.GetMessageBeforeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUseremail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.shlimtech.typeeleven.GetMessageBeforeRequest} returns this
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.shlimtech.typeeleven.GetMessageBeforeRequest} returns this
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string userEmail = 3;
 * @return {string}
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.prototype.getUseremail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.shlimtech.typeeleven.GetMessageBeforeRequest} returns this
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeRequest.prototype.setUseremail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.shlimtech.typeeleven.GetMessageBeforeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.org.shlimtech.typeeleven.GrpcMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.shlimtech.typeeleven.GetMessageBeforeResponse}
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.shlimtech.typeeleven.GetMessageBeforeResponse;
  return proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.shlimtech.typeeleven.GetMessageBeforeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.shlimtech.typeeleven.GetMessageBeforeResponse}
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.shlimtech.typeeleven.GrpcMessage;
      reader.readMessage(value,proto.org.shlimtech.typeeleven.GrpcMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.shlimtech.typeeleven.GetMessageBeforeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.org.shlimtech.typeeleven.GrpcMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GrpcMessage messages = 1;
 * @return {!Array<!proto.org.shlimtech.typeeleven.GrpcMessage>}
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.org.shlimtech.typeeleven.GrpcMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.shlimtech.typeeleven.GrpcMessage, 1));
};


/**
 * @param {!Array<!proto.org.shlimtech.typeeleven.GrpcMessage>} value
 * @return {!proto.org.shlimtech.typeeleven.GetMessageBeforeResponse} returns this
*/
proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.org.shlimtech.typeeleven.GrpcMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.shlimtech.typeeleven.GrpcMessage}
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.org.shlimtech.typeeleven.GrpcMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.shlimtech.typeeleven.GetMessageBeforeResponse} returns this
 */
proto.org.shlimtech.typeeleven.GetMessageBeforeResponse.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


goog.object.extend(exports, proto.org.shlimtech.typeeleven);
